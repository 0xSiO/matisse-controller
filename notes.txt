Requirements: NI VISA software, Python 3, pyvisa 1.9.1

The Matisse device ID is constant under visa.ResourceManager().list_resources()
Always USB0::0x17E7::0x0102::07-40-01::INSTR at least on my machine :/ Have to confirm this for other computers

PyVisa-Py doesn't work on Linux, and the proprietary VISA libraries are a nightmare to install, don't bother

Average execution time of various commands:
Grabbing DC diode power: ~0.5 ms
Grabbing BiFi motor pos: ~3.3 ms
Grabbing BiFi wavelength: ~4.4 ms
Grabbing TE motor pos: ~3.8 ms
Grabbing refcell pos (SCAN:NOW?): ~0.5 ms
Note: SCAN:DEVICE? returns 2, which is the ID of the refcell piezo. This is expected.

An error will lock all commands :(
Have to use ERROR:CLEAR to continue querying.
Error display syntax: "!ERROR N" where N is the number of errors on the stack

Trying to run/stop the control loops for slow/fast piezos multiple times in a row is fine, no errors.
When stabilizing the laser, the reference cell, slow piezo, fast piezo, and piezo etalon all change.
The reference cell limits for the scan are usually left alone, and the up/down directions specified in the commander
software indicate where the reference cell mirror is going, continuing the scan until it hits one of those limits.

SCAN:MODE? -> up = 0, down = 1. up = increase wavelength, down = decrease wavelength
We can set the scan mode while a scan is running without any issues.

Detailed process for setting wavelength:
1. Set approx. wavelength using BiFi.
2. Scan the BiFi back and forth and measure the total laser power at each point. Power looks like upside-down parabolas.
3. Find all local maxima of the laser power data. Move the BiFi to the maximum that's closest to the desired wavelength.
4. Scan the thin etalon back and forth and measure the thin etalon reflex at each point.
5. Find all local minima of the reflex data. Move the TE to the minimum that's closest to the desired wavelength. Maybe
   use a binary search?
6. Shift the TE to the left or right a little bit. We want to be on the "flank" of the chosen parabola. Distance to
   shift: about 1/5 the distance between current minimum and next local maximum.
7. Adjust the piezo etalon until desired wavelength is reached.
8. Lock slow piezo, thin etalon, piezo etalon, then fast piezo. Stabilize at the desired wavelength.

Wavemeter is read via serial port connection. Since I don't have a serial port I'll have to look at the existing MATLAB
code that's currently used to read the wavelength and hope for the best. Maybe try testing out Python -> serial commands
on the Fianium laser.

Reading from wavemeter: use VAL? command, value is the last 8 bytes of the response. Split it at the comma.
IDN?: b'*IDN$ Coherent Inc,WaveMaster,W0364,A1.1V1.6\r\n'
Error format: b'ERR$ 01\r\n'
Value format: b'VAL$ 59445457, 737.776\r\n'

Adjusting the refcell will simultaneously change positions of other piezos (notably the slow piezo and piezo etalon).
Other piezos appear to travel opposite the direction of the refcell.
For larger drifts on stabilization scan the refcell is not great, so jump over another mode using the TE piezo.

If you reach the limits of any piezo while adjusting the wavelength:
  - For SMALL corrections:
    - To increase wavelength: set slow piezo and piezo etalon to large values, set refcell to small value. This
      shouldn't change the wavelength very much. Then you can increase the refcell more.
    - If the drift is still too high after this adjustment, consider the case for larger corrections instead or ask for
      manual correction from the user
  - For LARGER corrections:
    - For larger corrections, you're going to need to adjust the TE piezo. Might be better to just repeat the whole
      wavelength-setting process here.

Piezo etalon value to set is PZETL:BASE, the baseline of the modulation waveform. This is the value set by the slider in
Matisse Commander.

Today I got 'VAL$ 67325238,NO SIGNAL' in response to 'VAL?' from the WaveMaster, though it was working a couple minutes
beforehand. Turns out you need to actually turn on the Matisse before you can use it.

Doing a birefringent filter scan and a thin etalon scan trigger the error lights on the Matisse :(
Sending individual movement commands works fine, but as soon as I try looping through a large list of positions it stops
working. Might be a timing issue? The voltage data I'm reading as I scan is just noise in one position.

The manual says there is some communication overhead in talking to the motor, so the commands need a bit of time to
execute. Look at the error code set by the motor controller to confirm this is the case. The motor will ignore commands
while it's busy, which is what I suspect is happening.

Error code given by the BiFi motor is 8840 when doing BiFi scan, which indicates "motor is running (command ignored)".
Idle status is 8194, "system is waiting for command / button pressed"
While moving motor using 'MOTBI:REL': 8969, "execute relative move command"

When running loop while checking for idle status, I keep getting code 8706, sometimes 514. No change in motor position.
Got it working, just use the last 8 bits of the motor status to decide whether to send the command, since the first few
bits change depending on other factors.

Important feature to add from Matisse Commander: RefCell properties measurement. Scan the RefCell, measure the RefCell
spectrum, fit to an Airy function. Do it when the laser is locked? When doing a fit, change the parameters of the fit to
the new fit so that the next fit uses the previous fit. This allows us to slowly correct a fit.

More:
RefCell waveform dialog, used primarily to find a recommended setpoint for the fast piezo (amplitude of the transmission
spectrum at full-width-half-max points). Scans RefCell and measures transmitted intensity.
RefCell properties measurement: measures transmitted intensity of the RefCell while scanning it. This is less of a
priority.
Control loop live view, shows live feed of values of internal variables used by various control loops.

Trying to open IDLE from the GUI results in an error since the WaveMaster can only be accessed with one instance at a
time. Trying to set the wavelength via the GUI results in a timeout error:
VI_ERROR_TMO (-1073807339): Timeout expired before operation completed.
Trying to access the BiFi motor status many times in a row causes a different error:
VI_ERROR_INP_PROT_VIOL (-1073807305): Device reported an input protocol error during transfer.
Restarting the GUI repeatedly gives the same error.
Continuing to execute commands via a shell sometimes gives another error:
Error executing Matisse command 'MOTBI:STATUS?' :ERR:CODE: 208
Error 208 is: "transfer buffer too small; the USB message will not fit into the host computer's transfer buffer."
This is unresolved until the control box is switched off and then on again.

Trying to write the RefCell position info when stabilizing gives an error:
print(f"Within tolerance.      Drift is {drift}, RefCell pos {self._matisse.query('SCAN:NOW?', numeric_result=True)}")
VI_ERROR_RSRC_LOCKED (-1073807345): Specified type of lock cannot be obtained, or specified operation cannot be
performed, because the resource is locked.
Might need to look into the pyvisa locking methods.

I'm getting none of the above issues when executing commands from a shell, no GUI. This leads me to believe it's a
threading issue and/or a resource locking issue. The Matisse can handle many commands thrown to it at once, but when
executing commands from different threads there seems to be an issue. Might need to stop other threads while stuff like
scans are running, then start the threads again when we finish. Simple one-query commands like setting the approx. BiFi
wavelength don't cause locking issues, so hopefully we only need to worry about the bigger stuff.

Disabling the status monitor widget in the GUI works!! Definitely a threading/locking issue. Might have to scrap the
status monitor or figure out a workaround.

Another thing I noticed is that the output while a long operation is running is not displayed in the log area, so
something is blocking the main thread. Do longer work in a separate thread so log area can update normally.

Scan plots aren't showing either. Probably just a silly issue though.

While the control loops are on, the fast piezo is not necessarily locked. Suggested wait time is about 7 seconds for a
lock, if not locked within this timeout or if any components reach their limits within that timeout, then stop the
locking procedure. If the fast piezo locks within the timeout, keep checking limits. If a component is at its limit, you
can adjust it in the opposite direction. When the fast piezo is locked we want to avoid disabling the lock and opt for
automatic corrections to components instead, then stop locking and perform the whole set_wavelength procedure again.

Need 3 options in stabilization menu: locking laser without setting fast piezo setpoint, locking and automatically
setting fast piezo setpoint, and a separate dialog to just set the fast piezo setpoint.

Don't give feedback unless something important is happening or you're changing something.
Pop up a dialog to set parameters of RefCell stabilization.
Adjust reference cell after setting wavelength to get it just right, then perform much smaller BiFi/TE scans after
setting wavelength to ensure you're still on the peaks. Also nice to see a scan while it's happening.

Timer doesn't seem to be working for lock correction timeout.

If can't obtain laser lock, suggest manual stabilizing of output power of the laser, or suggest redoing the lock while
setting the fast piezo setpoint. When we try locking again, put the 3 piezos back in the middle if they're too far to
one side.
